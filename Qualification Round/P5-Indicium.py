#Functions to Calc Latin Square
def row(n, r, c = []):
   if len(c) == n:
      yield c
   for i in range(1, n+1):
      if i not in c and i not in r[len(c)]:
         yield from row(n, r, c+[i])

def to_latin(n, c = []):
  if len(c) == n:
     yield c
  else:
     for i in row(n, [[]]*n if not c else list(zip(*c))):
        yield from to_latin(n, c+[i])


def getsum(arr):
    n=len(arr)
    return sum([arr[x][x] for x in range(n)])


def display(arr):
    for i in arr:
        for idx,j in enumerate(i):
            if idx+1-len(i):
                print("{} ".format(j),end='')
            else:
                print("{}".format(j))


def main():
    data={'2': {'2': [[1, 2], [2, 1]], '3': -1, '4': [[2, 1], [1, 2]]},
 '3': {'3': [[1, 2, 3], [3, 1, 2], [2, 3, 1]],
  '4': -1,
  '5': -1,
  '6': [[1, 2, 3], [2, 3, 1], [3, 1, 2]],
  '7': -1,
  '8': -1,
  '9': [[3, 1, 2], [2, 3, 1], [1, 2, 3]]},
 '4': {'4': [[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]],
  '5': -1,
  '6': [[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 2, 1], [4, 3, 1, 2]],
  '7': [[1, 2, 3, 4], [3, 1, 4, 2], [4, 3, 2, 1], [2, 4, 1, 3]],
  '8': [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]],
  '9': [[1, 2, 3, 4], [2, 4, 1, 3], [4, 3, 2, 1], [3, 1, 4, 2]],
  '10': [[1, 2, 3, 4], [2, 4, 1, 3], [3, 1, 4, 2], [4, 3, 2, 1]],
  '11': [[1, 2, 3, 4], [3, 4, 2, 1], [2, 1, 4, 3], [4, 3, 1, 2]],
  '12': [[1, 2, 3, 4], [3, 4, 1, 2], [2, 3, 4, 1], [4, 1, 2, 3]],
  '13': [[2, 1, 3, 4], [3, 4, 2, 1], [1, 3, 4, 2], [4, 2, 1, 3]],
  '14': [[3, 1, 2, 4], [1, 4, 3, 2], [2, 3, 4, 1], [4, 2, 1, 3]],
  '15': -1,
  '16': [[4, 1, 2, 3], [1, 4, 3, 2], [2, 3, 4, 1], [3, 2, 1, 4]]},
 '5': {'5': [[1, 2, 3, 4, 5],
   [2, 1, 4, 5, 3],
   [3, 5, 1, 2, 4],
   [4, 3, 5, 1, 2],
   [5, 4, 2, 3, 1]],
  '6': -1,
  '7': [[1, 2, 3, 4, 5],
   [3, 1, 4, 5, 2],
   [4, 5, 2, 1, 3],
   [5, 3, 1, 2, 4],
   [2, 4, 5, 3, 1]],
  '8': [[1, 2, 3, 4, 5],
   [2, 1, 4, 5, 3],
   [3, 5, 1, 2, 4],
   [5, 4, 2, 3, 1],
   [4, 3, 5, 1, 2]],
  '9': [[1, 2, 3, 4, 5],
   [2, 1, 4, 5, 3],
   [4, 5, 1, 3, 2],
   [3, 4, 5, 2, 1],
   [5, 3, 2, 1, 4]],
  '10': [[1, 2, 3, 4, 5],
   [2, 1, 4, 5, 3],
   [3, 4, 5, 1, 2],
   [5, 3, 1, 2, 4],
   [4, 5, 2, 3, 1]],
  '11': [[1, 2, 3, 4, 5],
   [2, 3, 1, 5, 4],
   [3, 5, 4, 1, 2],
   [4, 1, 5, 2, 3],
   [5, 4, 2, 3, 1]],
  '12': [[1, 2, 3, 4, 5],
   [2, 3, 1, 5, 4],
   [3, 4, 5, 1, 2],
   [5, 1, 4, 2, 3],
   [4, 5, 2, 3, 1]],
  '13': [[1, 2, 3, 4, 5],
   [2, 3, 1, 5, 4],
   [5, 1, 4, 2, 3],
   [4, 5, 2, 3, 1],
   [3, 4, 5, 1, 2]],
  '14': [[1, 2, 3, 4, 5],
   [2, 1, 4, 5, 3],
   [3, 4, 5, 1, 2],
   [4, 5, 2, 3, 1],
   [5, 3, 1, 2, 4]],
  '15': [[1, 2, 3, 4, 5],
   [2, 3, 1, 5, 4],
   [3, 4, 5, 1, 2],
   [4, 5, 2, 3, 1],
   [5, 1, 4, 2, 3]],
  '16': [[1, 2, 3, 4, 5],
   [2, 3, 4, 5, 1],
   [4, 1, 5, 2, 3],
   [5, 4, 1, 3, 2],
   [3, 5, 2, 1, 4]],
  '17': [[1, 2, 3, 4, 5],
   [2, 4, 1, 5, 3],
   [4, 3, 5, 2, 1],
   [5, 1, 4, 3, 2],
   [3, 5, 2, 1, 4]],
  '18': [[1, 2, 3, 4, 5],
   [2, 4, 5, 1, 3],
   [3, 5, 4, 2, 1],
   [4, 3, 1, 5, 2],
   [5, 1, 2, 3, 4]],
  '19': [[1, 2, 3, 4, 5],
   [2, 5, 1, 3, 4],
   [3, 4, 5, 1, 2],
   [4, 3, 2, 5, 1],
   [5, 1, 4, 2, 3]],
  '20': [[1, 2, 3, 4, 5],
   [2, 5, 4, 1, 3],
   [3, 4, 5, 2, 1],
   [4, 3, 1, 5, 2],
   [5, 1, 2, 3, 4]],
  '21': [[2, 1, 3, 4, 5],
   [1, 5, 4, 2, 3],
   [3, 4, 5, 1, 2],
   [4, 3, 2, 5, 1],
   [5, 2, 1, 3, 4]],
  '22': [[3, 1, 2, 4, 5],
   [1, 5, 4, 2, 3],
   [2, 4, 5, 3, 1],
   [4, 3, 1, 5, 2],
   [5, 2, 3, 1, 4]],
  '23': [[4, 1, 2, 3, 5],
   [1, 5, 3, 4, 2],
   [2, 4, 5, 1, 3],
   [3, 2, 4, 5, 1],
   [5, 3, 1, 2, 4]],
  '24': -1,
  '25': [[5, 1, 2, 3, 4],
   [1, 5, 3, 4, 2],
   [2, 4, 5, 1, 3],
   [3, 2, 4, 5, 1],
   [4, 3, 1, 2, 5]]}}

    t = int(input())
    for z in range(t):
        ip = input().split()
        n, k = int(ip[0]), int(ip[1])
        got = False
        arr = []
        """
        ans = to_latin(n)
        for i in ans:
            arr.append(i)

        for mat in arr:
            if getsum(mat) == k:
                got = True
                op = mat
                break
        """
        try:
            op=data['{}'.format(n)]["{}".format(k)]
        except:
            op=-1
        if op != -1:
            print("Case #{}: POSSIBLE".format(z+1))
            display(op)
        else:
            print('Case #{}: IMPOSSIBLE'.format(z+1))


if __name__ == '__main__':
    main()